# Импортируем необходимые модули из SQLAlchemy
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base

"""
Комментарий о работе SQLAlchemy:
  - Движок (Engine) — объект, управляющий подключением к базе данных.
    Он отвечает за создание пулов соединений и выполнение SQL-запросов.

  - Фабрика сессий (Session Factory) — объект, создающий сессии для работы с базой данных.
    Сессия представляет собой "рабочее" соединение с базой данных, через которое выполняются
    операции CRUD (создание, чтение, обновление, удаление).
    Сессия используется для управления транзакциями и операциями на высоком уровне.
"""

# Создаем базовый класс для декларативного определения моделей
Base = declarative_base()

"""
create_engine: Инициализирует подключение к базе данных.
Настройка для PostgreSQL:

- postgresql+psycopg2: Указывает на использование PostgreSQL с драйвером psycopg2
- username: Имя пользователя базы данных
- password: Пароль пользователя
- localhost: Адрес сервера базы данных
- dbname: Имя базы данных
"""
engine = create_engine('postgresql+psycopg2://postgres:1111@localhost:1111/postgres')

# связываем фабрику сессий с движком, что позволяет создавать новые сессии для взаимодействия с базой данных.
Session = sessionmaker(bind=engine)


def get_session():
    """
    Возвращает новую сессию базы данных.

    get_session: Возвращает экземпляр сессии, который используется для выполнения операций с базой данных.
    """
    return Session()


def init_db():
    """
    Инициализация базы данных и создание таблиц.

    Base.metadata: Объект metadata содержит информацию о всех таблицах и схемах,
    определенных в моделях, которые наследуются от Base. Хранит данные о структуре таблиц,
    такие как имена столбцов и их типы данных.

    create_all(engine): Создает все таблицы в базе данных, которые еще не существуют,
    на основе информации, содержащейся в metadata.
    Использует объект engine для подключения к базе данных и выполнения SQL-запросов для создания таблиц.
    """
    Base.metadata.create_all(engine)
